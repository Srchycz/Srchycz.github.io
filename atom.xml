<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Srch&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/d74bc5697d6d4e53158b4b8cada68343</icon>
  
  <link href="http://srchycz.github.io/atom.xml" rel="self"/>
  
  <link href="http://srchycz.github.io/"/>
  <updated>2023-05-11T16:00:00.000Z</updated>
  <id>http://srchycz.github.io/</id>
  
  <author>
    <name>Srch_</name>
    <email>2982296464@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Dijkstra求无向图过某点最小环</title>
    <link href="http://srchycz.github.io/2023/05/12/%E6%9C%80%E5%B0%8F%E7%8E%AF/"/>
    <id>http://srchycz.github.io/2023/05/12/%E6%9C%80%E5%B0%8F%E7%8E%AF/</id>
    <published>2023-05-11T16:00:00.000Z</published>
    <updated>2023-05-11T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>该部分针对第十一次作业新增方法<code>queryLeastMoment</code>进行一个效率较高的思路分享</p><p>在理解完JML后，该方法可以概括为，给定一个无向图，求出无向图上过某点的最小环</p><h2 id="魔改-dijkstra"><a href="#魔改-dijkstra" class="headerlink" title="魔改 dijkstra"></a>魔改 dijkstra</h2><h3 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h3><p>不妨设无向图为G(V,E)，源点是x，要求出过x点的最小环</p><p>一种可行的思路是，逐个枚举V中的点y(y!&#x3D;x),求出经过x，y的最小环，这个环是满足原本要求的(即经过点x的)，显然，在逐个枚举点y后，其中的最小值即是答案</p><p>那么问题转化为如何快速的求出经过点x,y的最小环，我们考虑求出x-&gt;y的最短路及带一定<strong>限制</strong>的次短路。我们作个约定，称一条以x为起点的路径中从x出发经过的第一个点称作<strong>出点</strong>，那么我们所要求的限制就是<strong>次短路的出点与最短路的出点不同</strong>。</p><p>最短路和带限制的次短路拼起来显然就构成了一个经过x的“环”。我们对所有点都求出类似的最短路和次短路即可更新答案。</p><p>当然，如果仔细想一下，可以发现上文所提到由最短路和带限制的次短路构成的环中，我们只在出点部分作了约束，最短路和次短路在后续部分可能存在重叠，并非严格意义上的环。但是由于我们对出点的限制，在这样最短路和次短路拼接后的路径中，一定包含了一个过x的环，这个将在枚举到两段路径第一次重叠时的顶点被考虑到，从而不会影响正确性。</p><p><img src="https://s2.loli.net/2023/05/12/5VQHD2iEK31jF8T.png" alt="graph.png"></p><p>如上图中1-&gt;3的最短路是：1-&gt;5-&gt;3，带限制的次短路为1-&gt;6-&gt;2-&gt;5-&gt;3,拼接后会有重合（5-&gt;3部分），但是在枚举到5号点时该答案一定会被优化掉，所以不影响正确性。</p><p>幸运的是，要求出从x出发的单源最短路和单源限制次短路是可以在1次<code>dijkstra</code>内完成的！</p><h3 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h3><h4 id="dijkstra流程回顾："><a href="#dijkstra流程回顾：" class="headerlink" title="dijkstra流程回顾："></a><code>dijkstra</code>流程回顾：</h4><p>1.初始化</p><p>源点dist[x] &#x3D; 0,与源点直接相连的顶点初始化dist[v]&#x3D;w(x,v)，其他顶点的dist设为极大值</p><p>同时记录一个vis数组，初始化除源点外均为false</p><p>2.找出一个未被标记的、dist最小的顶点u,然后将其对应的vis置为true</p><p>3.扫描u的所有出边，判断是否满足三角形不等式，尝试用dist[u] + w(u,v)更新dist[v]</p><p>4.重复2、3,直到所有节点均被标记</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>在初始化部分中，对于每个点，我们需要记录四个字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Path</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> dist1;<span class="comment">//最短路长</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> dist2;<span class="comment">//次短路长</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> origin1;<span class="comment">//最短路出点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> origin2;<span class="comment">//次短路出点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化时，<code>dist</code>置极大值(如0x3f3f3f3f)，<code>origin</code>可置-1</p><p>然后将与起点直接相连的顶点的dist1置为相连边的权重，origin1记为该顶点本身的id</p><h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><p>我们还是每次挑出最短路最小的且未访问过的顶点，记其为u，然后扫描u的所有出边，记出边的另一个顶点为v</p><p>在更新部分，简言之，要用当前点<code>u</code>的最短路和次短路分别去尝试更新目标点<code>v</code>的最短路和次短路</p><p>记<code>dis(u)</code>为到u的最短路，<code>dis2(u)</code>为次短路，<code>ori(u)</code>为最短路的出点，<code>ori2(u)</code>为次短路出点，那么更新的逻辑展示如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> dist)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (dist + w(u,v) &lt; dis(v)) &#123;<span class="comment">//当前v的最短路可被更新</span></span><br><span class="line">    <span class="keyword">if</span> (ori(u) != ori(v)) &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        新路径与原最短路出点不同 那么v原先的最短路就可作为次短路</span></span><br><span class="line"><span class="comment">        把v的最短路赋值给v的次短路 记得也要把出点赋值过去</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    不论新路径的出点是否与原最短路相同</span></span><br><span class="line"><span class="comment">    在满足三角形不等式的条件下 都一定用新路径更新最短路</span></span><br><span class="line"><span class="comment">        最短路的出点改为新路径的出点</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (dist + w(u,v) &lt; dis2(v)) &#123;<span class="comment">//当前v的次短路可被更新</span></span><br><span class="line"><span class="keyword">if</span> (ori(u) != ori(v)) &#123;</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">       新路径与最短路的出点不同</span></span><br><span class="line"><span class="comment">       可以用来更新次短路</span></span><br><span class="line"><span class="comment">            同时次短路的出点改为新路径的出点</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">update(dis(u));<span class="comment">//尝试用u的最短路去更新</span></span><br><span class="line">update(dis2(u));<span class="comment">//尝试用u的次短路去更新</span></span><br></pre></td></tr></table></figure><p>其余部分与<code>dijkstra</code>流程相同，不再赘述</p><h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><p>通过上述实现，我们可以做一遍<code>dijkstra</code>就求出以x为源点的单源最短路和单源带限制次短路</p><p>然后逐个枚举每个点，用最短路+次短路更新答案即可</p><p>一次询问中，上述复杂度为$O(n+n^2)$的, 当然，<code>dijkstra</code>的过程可以用优先队列去优化</p><p>优化后单次询问复杂度为$O(n+mlog\space n)$</p><h3 id="个人反思"><a href="#个人反思" class="headerlink" title="个人反思"></a>个人反思</h3><p>在上述算法中跑完一遍<code>dijkstra</code>后, 我们枚举每个点尝试用其最短路+次短路更新答案，但是这里似乎还有优化空间，枚举范围其实可以缩小为与源点x直接相连的顶点集。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上是我就本次作业中<code>queryLeastMoment</code>方法一个实现思路分享，个人水平有限，上述内容如有错误，还望不吝指出</p>]]></content>
    
    
    <summary type="html">由BUAA-OO-2023作业引发的思考</summary>
    
    
    
    <category term="Algorithm" scheme="http://srchycz.github.io/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://srchycz.github.io/2023/04/25/hello-world/"/>
    <id>http://srchycz.github.io/2023/04/25/hello-world/</id>
    <published>2023-04-25T10:45:18.867Z</published>
    <updated>2023-04-25T10:45:18.867Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
