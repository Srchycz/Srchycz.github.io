<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Srch&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/d74bc5697d6d4e53158b4b8cada68343</icon>
  
  <link href="http://srchycz.github.io/atom.xml" rel="self"/>
  
  <link href="http://srchycz.github.io/"/>
  <updated>2023-06-17T16:00:00.000Z</updated>
  <id>http://srchycz.github.io/</id>
  
  <author>
    <name>Srchycz</name>
    <email>2982296464@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>lab6-chanllenge实验报告</title>
    <link href="http://srchycz.github.io/2023/06/18/Lab6-challenge/"/>
    <id>http://srchycz.github.io/2023/06/18/Lab6-challenge/</id>
    <published>2023-06-17T16:00:00.000Z</published>
    <updated>2023-06-17T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>命定的局限尽可永在，不屈的挑战却不可须臾或缺。   ————史铁生</p></blockquote><h1 id="任务实现"><a href="#任务实现" class="headerlink" title="任务实现"></a>任务实现</h1><h2 id="一行多命令"><a href="#一行多命令" class="headerlink" title="一行多命令"></a>一行多命令</h2><p>实现思路：当遇到<code>;</code>时，fork出一个子进程执行已解析好的命令，父进程wait子进程结束后继续解析<code>;</code>之后的内容</p><p>相关代码: <code>(user/sh.c)</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">&#x27;;&#x27;</span>: &#123;</span><br><span class="line"><span class="type">int</span> r;</span><br><span class="line"><span class="keyword">if</span> ((r = fork()) &lt; <span class="number">0</span>) &#123; <span class="comment">// fork一个子进程来执行</span></span><br><span class="line">user_panic(<span class="string">&quot;fork: %d&quot;</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (r == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> argc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">wait(r);</span><br><span class="line"><span class="keyword">return</span> parsecmd(argv, rightpipe);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后台任务"><a href="#后台任务" class="headerlink" title="后台任务"></a>后台任务</h2><p>这个和一行多命令的实现类似，区别在于要无阻塞的让父进程继续解析即可</p><p>相关代码:<code>(user/sh.c)</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">&#x27;&amp;&#x27;</span>: &#123;</span><br><span class="line"><span class="keyword">if</span> (gettoken(<span class="number">0</span>, &amp;t) != <span class="string">&#x27;&amp;&#x27;</span>) &#123;</span><br><span class="line">debugf(<span class="string">&quot;syntax error: &amp; not followed by &amp;\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> r;</span><br><span class="line"><span class="keyword">if</span> ((r = fork()) &lt; <span class="number">0</span>) &#123; <span class="comment">// fork一个子进程来执行</span></span><br><span class="line">user_panic(<span class="string">&quot;fork: %d&quot;</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (r == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> argc;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> parsecmd(argv, rightpipe); <span class="comment">// 无阻塞直接运行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="引号支持"><a href="#引号支持" class="headerlink" title="引号支持"></a>引号支持</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>该项实现难度不大，修改<code>_gettoken</code>函数，将双引号之间的内容作为<code>&#39;w&#39;</code>返回即可</p><p>主要思路就是当检测到一个双引号时开始逐个向后尝试检测另一个双引号, 然后将引号后第一个字符的地址传给p1, 返回值为’w’</p><h3 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h3><p>需要注意的点是,<strong>在检测到第二个双引号后要将其赋为\0以保证引号间的内容可以作为字符串操作</strong></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>实现代码: <code>user/sh.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;&quot;&#x27;</span> == *s) &#123; <span class="comment">// 支持双引号</span></span><br><span class="line">*p1 = ++s;</span><br><span class="line"><span class="keyword">while</span> (*s != <span class="number">0</span> &amp;&amp; *s != <span class="string">&#x27;&quot;&#x27;</span>) &#123;</span><br><span class="line">s++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (*s == <span class="number">0</span>) user_panic(<span class="string">&quot;Expected another &#x27;\&quot;&#x27; !\n&quot;</span>);</span><br><span class="line">*s = <span class="number">0</span>;</span><br><span class="line">*p2 = ++s;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;w&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方向键支持"><a href="#方向键支持" class="headerlink" title="方向键支持"></a>方向键支持</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>这个有一定难度，我重构了 <code>realine</code> 函数, 在读入过程中维护了两个双端队列，分别保存光标前的指令(frontbuf)和光标后的指令(backbuf)。</p><ul><li>当输入普通字符时，清除光标到行末的所有内容，再将<code>backbuf</code>的内容重新打印，注意重新打印后光标位置会改变，要将其复原</li><li>当输入左&#x2F;右方向键时，维护两个双端队列，注意边界处的处理即可</li><li>当输入<code>Backspace</code>时，将<code>frontbuf</code>的队尾出队，清除光标到行末的所有内容，再将<code>backbuf</code>的内容重新打印，注意重新打印后光标位置会改变，要将其复原</li></ul><p>以上实现中的双端队列实现我复用了<code>include/queue.h</code>中的<code>TAILQ_</code>系列宏，并增加了相应函数(见相关代码部分)</p><h3 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h3><p>其中遇到的主要问题就是关于光标的控制, 如何左右移动以及清除内容, 专门去查阅了ANSI控制码文档解决了相应问题(注意下面文档中的forward对应向右，backward对应向左，一开始被这个坑了找了半天bug..)</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;Cursor Up&lt;ESC&gt;[&#123;COUNT&#125;A</span><br></pre></td></tr></table></figure><ul><li>Moves the cursor up by <em>COUNT</em> rows; the default count is 1.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;Cursor Down&lt;ESC&gt;[&#123;COUNT&#125;B</span><br></pre></td></tr></table></figure><ul><li>Moves the cursor down by <em>COUNT</em> rows; the default count is 1.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;Cursor Forward&lt;ESC&gt;[&#123;COUNT&#125;C</span><br></pre></td></tr></table></figure><ul><li>Moves the cursor <em>forward</em> by <em>COUNT</em> columns; the default count is 1.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;Cursor Backward&lt;ESC&gt;[&#123;COUNT&#125;D</span><br></pre></td></tr></table></figure><ul><li>Moves the cursor <em>backward</em> by <em>COUNT</em> columns; the default count is 1.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;Erase End of Line&lt;ESC&gt;[K</span><br></pre></td></tr></table></figure><ul><li>Erases from the current cursor position to the end of the current line.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;Erase Start of Line&lt;ESC&gt;[1K</span><br></pre></td></tr></table></figure><ul><li>Erases from the current cursor position to the start of the current line.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;Erase Line&lt;ESC&gt;[2K</span><br></pre></td></tr></table></figure><ul><li>Erases the entire current line.</li></ul></blockquote><p>此外需要注意：</p><ul><li>重新打印<code>backbuf</code>时会修改光标位置，要记录下原有光标位置并将其复原</li><li>在左&#x2F;右键移动时要注意边界情况，当对应队列为空时应输出一个反向的移动控制符以抵消移动效果，呈现出一种移动到边界的感觉</li></ul><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p>相关代码:<code>(user/sh.c)</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> BufLen 1024</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Buf</span> &#123;</span></span><br><span class="line"><span class="type">char</span> data;</span><br><span class="line">TAILQ_ENTRY(Buf) buf_link;</span><br><span class="line"><span class="type">int</span> valid;</span><br><span class="line">&#125;;</span><br><span class="line">TAILQ_HEAD(Buf_list, Buf);</span><br><span class="line"><span class="type">void</span> <span class="title function_">initBuf</span><span class="params">(<span class="keyword">struct</span> Buf *<span class="built_in">list</span>, <span class="type">int</span> n)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;++i) &#123;</span><br><span class="line"><span class="built_in">list</span>[i].valid = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">list</span>[i].buf_link.tqe_next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">list</span>[i].buf_link.tqe_prev = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> Buf *<span class="title function_">allocBuf</span><span class="params">(<span class="keyword">struct</span> Buf *<span class="built_in">list</span>, <span class="type">int</span> n)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">list</span>[i].valid == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">list</span>[i].buf_link.tqe_next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">list</span>[i].buf_link.tqe_prev = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">list</span>[i].valid = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> &amp;<span class="built_in">list</span>[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">user_panic(<span class="string">&quot;No spare buf left!&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>readline相关代码:<code>(user/sh.c)</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">readline</span><span class="params">(<span class="type">char</span> *buf, u_int n)</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Buf</span> <span class="title">node</span>[<span class="title">BufLen</span>];</span></span><br><span class="line">initBuf(node, BufLen);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Buf_list</span> <span class="title">frontbuf</span>;</span> <span class="comment">// 光标位置前缓冲区</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Buf_list</span> <span class="title">backbuf</span>;</span> <span class="comment">// 光标位置后缓冲区</span></span><br><span class="line">TAILQ_INIT(&amp;backbuf);</span><br><span class="line">TAILQ_INIT(&amp;frontbuf);</span><br><span class="line"><span class="type">int</span> r;</span><br><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line"><span class="type">char</span> tempc;</span><br><span class="line"><span class="keyword">if</span> ((r = read(<span class="number">0</span>, &amp;tempc, <span class="number">1</span>)) != <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (r &lt; <span class="number">0</span>) &#123;</span><br><span class="line">debugf(<span class="string">&quot;read error: %d\n&quot;</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span> (tempc) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x7f</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;\b&#x27;</span>: <span class="comment">// 删除</span></span><br><span class="line"><span class="keyword">if</span> (!TAILQ_EMPTY(&amp;frontbuf)) &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Buf</span> *<span class="title">tlast</span> =</span> TAILQ_LAST(&amp;frontbuf, Buf_list);</span><br><span class="line">tlast-&gt;valid = <span class="number">0</span>; <span class="comment">// free</span></span><br><span class="line">TAILQ_REMOVE(&amp;frontbuf, tlast, buf_link);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\b\x1b[K&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (!TAILQ_EMPTY(&amp;backbuf)) &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Buf</span> *<span class="title">cur</span>;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\x1b[s&quot;</span>); <span class="comment">// 保存光标位置</span></span><br><span class="line">TAILQ_FOREACH(cur, &amp;backbuf, buf_link) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, cur-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\x1b[u&quot;</span>); <span class="comment">// 复原光标位置</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;\r&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;\n&#x27;</span>: &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Buf</span> *<span class="title">cur</span>;</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">TAILQ_FOREACH(cur, &amp;frontbuf, buf_link)</span><br><span class="line">buf[i++] = cur-&gt;data;</span><br><span class="line">TAILQ_FOREACH(cur, &amp;backbuf, buf_link)</span><br><span class="line">buf[i++] = cur-&gt;data;</span><br><span class="line">buf[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x1B</span>: &#123; <span class="comment">// &#x27;ESC&#x27;</span></span><br><span class="line"><span class="type">char</span> temp[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">if</span> ((r = read(<span class="number">0</span>, temp, <span class="number">1</span>)) != <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (r &lt; <span class="number">0</span>) &#123;</span><br><span class="line">debugf(<span class="string">&quot;read error: %d\n&quot;</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (temp[<span class="number">0</span>] != <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">debugf(<span class="string">&quot;cannot recognize\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((r = read(<span class="number">0</span>, temp + <span class="number">1</span>, <span class="number">1</span>)) != <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (r &lt; <span class="number">0</span>) &#123;</span><br><span class="line">debugf(<span class="string">&quot;read error: %d\n&quot;</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span> (temp[<span class="number">1</span>]) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>: <span class="comment">// forward</span></span><br><span class="line"><span class="keyword">if</span> (!TAILQ_EMPTY(&amp;frontbuf)) &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Buf</span> *<span class="title">tlast</span> =</span> TAILQ_LAST(&amp;frontbuf, Buf_list);</span><br><span class="line">TAILQ_REMOVE(&amp;frontbuf, tlast, buf_link);</span><br><span class="line">TAILQ_INSERT_HEAD(&amp;backbuf, tlast, buf_link);</span><br><span class="line"><span class="comment">// printf(&quot;\b&quot;); // 左移</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\x1b[1C&quot;</span>); <span class="comment">// 抵消</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>: <span class="comment">// backward</span></span><br><span class="line"><span class="keyword">if</span> (!TAILQ_EMPTY(&amp;backbuf)) &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Buf</span> *<span class="title">tfirst</span> =</span> TAILQ_FIRST(&amp;backbuf);</span><br><span class="line">TAILQ_REMOVE(&amp;backbuf, tfirst, buf_link);</span><br><span class="line">TAILQ_INSERT_TAIL(&amp;frontbuf, tfirst, buf_link);</span><br><span class="line"><span class="comment">// printf(&quot;\x1b[1C&quot;); // 右移</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\b&quot;</span>);<span class="comment">// 抵消</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>: &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Buf</span> *<span class="title">tempnode</span> =</span> allocBuf(node, BufLen);</span><br><span class="line">tempnode-&gt;data = tempc;</span><br><span class="line">TAILQ_INSERT_TAIL(&amp;frontbuf, tempnode, buf_link);</span><br><span class="line"><span class="keyword">if</span> (!TAILQ_EMPTY(&amp;backbuf)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\x1b[K&quot;</span>); <span class="comment">// 清空光标后内容</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\x1b[s&quot;</span>); <span class="comment">// 保存光标位置</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Buf</span> *<span class="title">cur</span>;</span></span><br><span class="line">TAILQ_FOREACH(cur, &amp;backbuf, buf_link) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, cur-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\x1b[u&quot;</span>); <span class="comment">// 复原光标位置</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">debugf(<span class="string">&quot;line too long\n&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> ((r = read(<span class="number">0</span>, buf, <span class="number">1</span>)) == <span class="number">1</span> &amp;&amp; buf[<span class="number">0</span>] != <span class="string">&#x27;\r&#x27;</span> &amp;&amp; buf[<span class="number">0</span>] != <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line">buf[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现-b的省略"><a href="#实现-b的省略" class="headerlink" title="实现.b的省略"></a>实现.b的省略</h2><p>该项实现难度不大，修改spawn函数, 在open返回错误值时追加.b重新调用open即可</p><p>相关代码：<code>user/lib/spawn.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">fd = open(prog, O_RDONLY);</span><br><span class="line"><span class="keyword">if</span> (fd &lt; <span class="number">0</span>) &#123;<span class="comment">// open失败 尝试追加 .b 打开</span></span><br><span class="line"><span class="type">char</span> newprog[<span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> idx;</span><br><span class="line"><span class="keyword">for</span> (idx = <span class="number">0</span>; prog[idx] != <span class="string">&#x27;\0&#x27;</span>; ++idx)</span><br><span class="line">newprog[idx] = prog[idx];</span><br><span class="line">newprog[idx++] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">newprog[idx++] = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">newprog[idx++] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">fd = open(newprog, O_RDONLY);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> fd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现更丰富命令"><a href="#实现更丰富命令" class="headerlink" title="实现更丰富命令"></a>实现更丰富命令</h2><p>在<code>user/include.mk</code>中<code>USEAPPS</code>中增加<code>mkdir.b touch.b tree.b</code></p><p>在<code>user/</code>下新建<code>mkdir.c touch.c tree.c</code>编写相应代码</p><h3 id="mkdir和touch"><a href="#mkdir和touch" class="headerlink" title="mkdir和touch"></a>mkdir和touch</h3><p>该部分实现 mkdir 和 touch 以及重定向的路径能自动创建文件</p><p>这几项涉及文件的创建，我的做法是新增新的文件服务接口(就像lab5-2-exam实现openat一样)</p><p>主要改动如下:</p><ul><li><p>修改<code>user/include/fsreq.h</code> 添加对应请求类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> FSREQ_CREATE 8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Fsreq_create</span> &#123;</span></span><br><span class="line"><span class="type">char</span> req_path[MAXPATHLEN];</span><br><span class="line">u_int req_type;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>修改<code>user/include/lib.h</code> 增加对应函数声明</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fsipc.c</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fsipc_create</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *, u_int)</span>;</span><br><span class="line"><span class="comment">// file.c</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">create</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path, u_int type)</span>;</span><br></pre></td></tr></table></figure></li><li><p>修改<code>user/lib/fsipc.c</code>实现函数<code>fsipc_create(const char *, u_int)</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fsipc_create</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path, u_int type)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!(*path) || <span class="built_in">strlen</span>(path) &gt; MAXPATHLEN)</span><br><span class="line"><span class="keyword">return</span> -E_BAD_PATH;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Fsreq_create</span> *<span class="title">req</span> =</span> (<span class="keyword">struct</span> Fsreq_create *)fsipcbuf;</span><br><span class="line"><span class="built_in">strcpy</span>(req-&gt;req_path, path);</span><br><span class="line">req-&gt;req_type = type;</span><br><span class="line"><span class="keyword">return</span> fsipc(FSREQ_CREATE, req, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改<code>user/lib/file.c</code> 实现函数<code>create(const char *path, u_int type)</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">create</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path, u_int type)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fsipc_create(path, type);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改<code>fs/serv.c</code> 在serve中增加对应的分支并增加对应的<code>serve_create</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">serve_create</span><span class="params">(u_int envid, <span class="keyword">struct</span> Fsreq_create *req)</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">File</span> *<span class="title">f</span>;</span></span><br><span class="line"><span class="type">int</span> r;</span><br><span class="line"><span class="comment">// Try open the file.</span></span><br><span class="line"><span class="keyword">if</span> ((r = file_open(req-&gt;req_path, &amp;f)) &lt; <span class="number">0</span>) &#123; <span class="comment">// 不存在即创建</span></span><br><span class="line">r = file_create(req-&gt;req_path, &amp;f);</span><br><span class="line"><span class="keyword">if</span> (req-&gt;req_type == FTYPE_DIR)</span><br><span class="line">f-&gt;f_type = FTYPE_DIR;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">f-&gt;f_type = FTYPE_REG;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (r &lt; <span class="number">0</span>) &#123;</span><br><span class="line">ipc_send(envid, r, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">ipc_send(envid, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">case</span> FSREQ_CREATE:</span><br><span class="line">serve_create(whom, (<span class="keyword">struct</span> Fsreq_create *)REQVA);</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure></li><li><p>修改<code>fs/serv.h</code> 增加相应file_create的函数声明</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">file_create</span><span class="params">(<span class="type">char</span> *path, <span class="keyword">struct</span> File **pflie)</span>;</span><br></pre></td></tr></table></figure></li></ul><p>此外也辅助性的实现了打开模式<code>O_CREAT</code>和<code>O_MKDIR</code></p><p>当采用这种方式打开时，会在路径不存在时创建文件</p><ul><li><p>修改<code>fs/serv.c</code> 中的<code>serve_open</code>函数，增加<code>O_CREAT</code>和<code>O_MKDIR</code>打开模式的控制逻辑</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// in serve_open(u_int envid, struct Fsreq_open *rq)</span></span><br><span class="line"><span class="keyword">if</span> ((r = file_open(rq-&gt;req_path, &amp;f)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (rq-&gt;req_omode &amp; O_CREAT == O_CREAT) &#123; <span class="comment">// 不存在即创建</span></span><br><span class="line">r = file_create(rq-&gt;req_path, &amp;f);</span><br><span class="line"><span class="keyword">if</span> (rq-&gt;req_omode &amp; O_MKDIR == O_MKDIR)</span><br><span class="line">f-&gt;f_type = FTYPE_DIR;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">f-&gt;f_type = FTYPE_REG;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (r &lt; <span class="number">0</span>) &#123;</span><br><span class="line">ipc_send(envid, r, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>在实现以上改动后，新建文件 <code>mkdir.c</code> 和 <code>touch.c</code>，分别调用上述接口</p><p>重定向部分使用<code>O_RDONLY | O_CREAT</code>或<code>O_WRONLY | O_CREAT</code>打开文件</p><h3 id="tree"><a href="#tree" class="headerlink" title="tree"></a>tree</h3><p>该部分实现tree</p><p>主要问题就是递归式的读取目录下的所有文件名，并格式化输出即可，我阅读了<code>ls.c</code>的实现，并仿照其实现了<code>tree.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">tree</span><span class="params">(<span class="type">char</span> *path)</span> &#123;</span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Stat</span> <span class="title">st</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((r = stat(path, &amp;st)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        user_panic(<span class="string">&quot;stat %s: %d&quot;</span>, path, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!st.st_isdir) &#123;</span><br><span class="line">        user_panic(<span class="string">&quot;The path is not a directory!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    _tree(path, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> _tree(<span class="type">char</span> *path, <span class="type">int</span> dep) &#123;</span><br><span class="line">    <span class="type">int</span> fd, n;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">File</span> <span class="title">f</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((fd = open(path, O_RDONLY)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        user_panic(<span class="string">&quot;open %s: %d&quot;</span>, path, fd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ((n = readn(fd, &amp;f, <span class="keyword">sizeof</span> f)) == <span class="keyword">sizeof</span> f) &#123;</span><br><span class="line">        <span class="keyword">if</span> (f.f_name[<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="type">int</span> i;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; dep; ++i)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;| &quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;|--%s\n&quot;</span>, f.f_name);</span><br><span class="line">            <span class="keyword">if</span> (f.f_type == FTYPE_DIR) &#123; <span class="comment">// 发现该文件是目录</span></span><br><span class="line">                <span class="type">char</span> newpath[<span class="number">1024</span>];</span><br><span class="line">                <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (path[i] != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">                    newpath[i] = path[i];</span><br><span class="line">                    ++i;</span><br><span class="line">                &#125;</span><br><span class="line">                newpath[i++] = <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">                <span class="keyword">while</span> (f.f_name[j] != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">                    newpath[i++] = f.f_name[j++];</span><br><span class="line">                newpath[i] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                _tree(newpath, dep + <span class="number">1</span>); <span class="comment">// 递归读取子目录</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        user_panic(<span class="string">&quot;short read in directory %s&quot;</span>, path);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        user_panic(<span class="string">&quot;error reading directory %s: %d&quot;</span>, path, n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="支持history"><a href="#支持history" class="headerlink" title="支持history"></a>支持history</h2><p>我将相关函数放在了<code>user/lib/history.c</code>中，同时在<code>user/include/lib.h</code>中增加了对应声明</p><p>相关代码：<code>(user/include/lib.h)</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// history.c</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">history_init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">savecmd</span><span class="params">(<span class="type">char</span> *buf)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">getPrev</span><span class="params">(<span class="type">char</span> *dst)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">getNxt</span><span class="params">(<span class="type">char</span> *dst)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> H_FORWARD 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> H_BACKWARD 1</span></span><br></pre></td></tr></table></figure><p>在<code>user/lib/history.c</code>中主要实现如下:</p><ul><li><p>创建.history文件。调用相应接口即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Overview:</span></span><br><span class="line"><span class="comment">// create and initialize .history</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">history_init</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">int</span> r = create(<span class="string">&quot;/.history&quot;</span>, FTYPE_REG);</span><br><span class="line">    <span class="keyword">if</span> (r &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        user_panic(<span class="string">&quot;history_init fail: %d\n&quot;</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">    isUpdate = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>保存输入的指令。我的实现中指令以<code>&lt;Instr&gt;&lt;\n&gt;</code>的形式保存，即指令后会增加一个换行符作为指令间的分隔符；此外，空指令将被忽略，不会写入<code>.history</code>中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">savecmd</span><span class="params">(<span class="type">char</span> *buf)</span> &#123;</span><br><span class="line">    <span class="type">int</span> r = open(<span class="string">&quot;/.history&quot;</span>, O_WRONLY);</span><br><span class="line">    <span class="keyword">if</span> (r &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        user_panic(<span class="string">&quot;history open fail: %d\n&quot;</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strlen</span>(buf) != <span class="number">0</span>) &#123;</span><br><span class="line">        write(r, buf, <span class="built_in">strlen</span>(buf));</span><br><span class="line">        write(r, <span class="string">&quot;\n&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    isUpdate = <span class="number">1</span>; <span class="comment">// .history is updated</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>获取历史记录中的上一条&#x2F;下一条指令</p><p>主要难点在于<strong>只有上下键输入时要能在上一次偏移的基础上进行查找</strong>；<strong>而一旦最近有过指令输入，再按上下键又必须从最近历史开始查找</strong></p><p>前者实现主要通过<strong>静态局部变量</strong>实现，通过复用上一次查询记录的位置,在其基础上继续查询即可; 后者通过记录一个全局变量<code>isUpate</code>来记录最近是否是指令存入即可，若<code>savecmd</code>被调用就将其置位，在<code>getInstr</code>中若<code>isUpdate</code>被置位，就重新将静态变量设为最近指令的位置同时将其复位。</p><ul><li>若<code>isUpdate</code>有效，即<code>.history</code>被更新了，就重新打开<code>.history</code>，将相关指针置于文件末尾</li><li>若<code>isUpdate</code>无效，即要在上一次偏移的基础上查找，直接使用相应的静态局部变量即可</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Overview:</span></span><br><span class="line"><span class="comment">// Save the previous instruction to dst from .history</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">getPrev</span><span class="params">(<span class="type">char</span> *dst)</span> &#123; <span class="comment">// 获取上一条指令的对外接口</span></span><br><span class="line">    getInstr(dst, H_FORWARD);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Overview:</span></span><br><span class="line"><span class="comment">// Save the next instruction to dst from .history</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">getNxt</span><span class="params">(<span class="type">char</span> *dst)</span> &#123; <span class="comment">// 获取下一条指令的对外接口</span></span><br><span class="line">    getInstr(dst, H_BACKWARD);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">getInstr</span><span class="params">(<span class="type">char</span> *dst, <span class="type">int</span> direct)</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">Fd</span> *<span class="title">fd</span>;</span></span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> fdnum;</span><br><span class="line">    <span class="type">static</span> <span class="type">char</span> *Lva;</span><br><span class="line">    <span class="type">static</span> <span class="type">char</span> *Rva;</span><br><span class="line">    <span class="type">static</span> <span class="type">char</span> *l;</span><br><span class="line">    <span class="type">static</span> <span class="type">char</span> *r;</span><br><span class="line">    <span class="keyword">if</span> (isUpdate) &#123; <span class="comment">// 最近有过控制台输入</span></span><br><span class="line">        fdnum = open(<span class="string">&quot;/.history&quot;</span>, O_RDONLY);</span><br><span class="line">        <span class="keyword">if</span> (fdnum &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            user_panic(<span class="string">&quot;fail to open /.history: %d\n&quot;</span>, fdnum);</span><br><span class="line">        &#125;</span><br><span class="line">        fd = num2fd(fdnum);</span><br><span class="line">        Lva = fd2data(fd);</span><br><span class="line">        Rva = Lva + ((<span class="keyword">struct</span> Filefd *)fd)-&gt;f_file.f_size;</span><br><span class="line">        l = r = Rva - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (direct == H_FORWARD) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= Lva &amp;&amp; *l == <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">            r = l;</span><br><span class="line">            --l;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (l &gt;= Lva &amp;&amp; *l != <span class="string">&#x27;\n&#x27;</span>) --l; <span class="comment">// l被设为上一条指令的起始位置 - 1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (r &lt; Rva &amp;&amp; *r == <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">            l = r;</span><br><span class="line">            ++r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (r &lt; Rva &amp;&amp; *r != <span class="string">&#x27;\n&#x27;</span>) ++r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; r - l - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        dst[i] = l[i + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    dst[r - l - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    isUpdate = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="选做-实现相对路径"><a href="#选做-实现相对路径" class="headerlink" title="选做(实现相对路径)"></a>选做(实现相对路径)</h2><p>我选择了实现相对路径部分</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>首先在<code>include/env.h</code> 中进程控制块的声明中添加用于记录当前进程工作目录的属性</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> env_workdir[<span class="number">1024</span>];</span><br></pre></td></tr></table></figure><p>接着增加对应的系统调用<code>syscall_getworkdir</code>,<code>syscall_chworkdir</code></p><p>需要修改<code>syscall_all.c</code>,<code>syscall.h</code>,<code>lib.h</code>,<code>syscall_lib.c</code></p><p>从而得到<strong>获取当前工作目录</strong>的接口和<strong>改变工作目录的接口</strong></p><p>内核部分代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sys_getworkdir</span><span class="params">(<span class="type">char</span> *dst)</span> &#123;</span><br><span class="line"><span class="built_in">strcpy</span>(dst, curenv-&gt;env_workdir);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sys_chworkdir</span><span class="params">(<span class="type">int</span> envid, <span class="type">char</span> *path)</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Env</span> *<span class="title">e</span>;</span></span><br><span class="line">envid2env(envid, &amp;e, <span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (path[i] != <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">i = <span class="built_in">strlen</span>(e-&gt;env_workdir);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">strcpy</span>(e-&gt;env_workdir + i, path);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>pwd命令我在user目录下新建了<code>pwd.c</code>,直接调用对应接口实现</p><p>cd命令我在runcmd函数中实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(argv[<span class="number">0</span>], <span class="string">&quot;cd&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">chdir(mainenvid, argv[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="难点-1"><a href="#难点-1" class="headerlink" title="难点"></a>难点</h3><p>该部分实现难点主要在于怎样让原有指令兼容相对路径，其中最关键的是<strong>路径合并的函数</strong>，要保证能正确处理<code>..</code>,<code>./</code>等特殊符号，我在<code>user/lib/path.c</code>中实现了所需的函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Overview:</span></span><br><span class="line"><span class="comment">// change workdir to path</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">chdir</span><span class="params">(<span class="type">int</span> envid, <span class="type">char</span> *path)</span> &#123;</span><br><span class="line">    <span class="type">char</span> now[<span class="number">1024</span>];</span><br><span class="line">    syscall_getworkdir(now);</span><br><span class="line">    mergepath(now, path);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Stat</span> <span class="title">st</span>;</span></span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line">    <span class="keyword">if</span> ((r = stat(path, &amp;st)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        debugf(<span class="string">&quot;chdir error:%d\n&quot;</span>, r);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!st.st_isdir) &#123;</span><br><span class="line">        debugf(<span class="string">&quot;%s is not a directory!\n&quot;</span>, now);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    syscall_chworkdir(envid, now);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Overview:</span></span><br><span class="line"><span class="comment">// Merge the suffix on the path </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">mergepath</span><span class="params">(<span class="type">char</span> *path, <span class="type">char</span> *suffix)</span> &#123;</span><br><span class="line">    <span class="comment">// debugf(&quot;path:%s suffix:%s\n&quot;, path, suffix);</span></span><br><span class="line">    <span class="keyword">if</span> (suffix[<span class="number">0</span>] == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">        path[<span class="number">0</span>] = <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">        path[<span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (suffix[<span class="number">0</span>] == <span class="string">&#x27;.&#x27;</span>) &#123; <span class="comment">// 略去当前目录的表述</span></span><br><span class="line">        <span class="keyword">if</span> (suffix[<span class="number">1</span>] == <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (suffix[<span class="number">1</span>] == <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">            suffix += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(path);</span><br><span class="line">    <span class="keyword">if</span> (path[len - <span class="number">1</span>] != <span class="string">&#x27;/&#x27;</span>) path[len++] = <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (;suffix[i] != <span class="string">&#x27;\0&#x27;</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (suffix[i] == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (suffix[i + <span class="number">1</span>] == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                cdup(path, len);</span><br><span class="line">                len = <span class="built_in">strlen</span>(path);</span><br><span class="line">                ++i;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (suffix[i + <span class="number">1</span>] == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">                ++i;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (suffix[i] == <span class="string">&#x27;/&#x27;</span> &amp;&amp; path[len - <span class="number">1</span>] == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        path[len++] = suffix[i];</span><br><span class="line">    &#125;</span><br><span class="line">    path[len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Overview:</span></span><br><span class="line"><span class="comment">// Set path to backward level</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">cdup</span><span class="params">(<span class="type">char</span> *path, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (len &lt;= <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (path[len - <span class="number">1</span>] == <span class="string">&#x27;/&#x27;</span>) --len;</span><br><span class="line">    <span class="keyword">while</span> (len &gt; <span class="number">0</span> &amp;&amp; path[len - <span class="number">1</span>] != <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">        --len;</span><br><span class="line">    path[len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后修改原有的<code>open</code>及<code>spawn</code>函数使它们会将传入的路径与当前进程路径拼接即可</p><p>再修改<code>tree、mkdir、touch</code>的默认参数是当前目录而非根目录即可</p><p>此外，关于cd命令如何实现修改shell主进程工作目录的问题，我个人采取的是最暴力的方式，记录下主进程的envid，直接通过传入相应的envid修改其工作目录，严格意义上来说这样的做法不太优雅，更合适些的可能是通过进程间通信解决</p><h1 id="测试部分"><a href="#测试部分" class="headerlink" title="测试部分"></a>测试部分</h1><p>个人为了方便测试，在test&#x2F;lab6_2&#x2F;fs目录下编写了四个task文件</p><p>在命令行中将输入重定向至相应文件可快速测试</p><p>至于历史命令、任意位置修改我也做了充分测试，由于它们效果是动态的受文档格式所限无法列于此处</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//task1用于测一行多命令和.b省略</span><br><span class="line">echo Thisisatestforsemicolon</span><br><span class="line">ls; ls | cat; echo hello &gt; aaa.txt;</span><br><span class="line">cat aaa.txt</span><br><span class="line">echo testend</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//task2用于测引号</span><br><span class="line">echo &quot;This is a test for quotation&quot;</span><br><span class="line">echo &quot;ls | cat &gt; aaa.txt&quot;</span><br><span class="line">echo &quot;Accepted! :)&quot; | cat &gt; aaa.txt</span><br><span class="line">cat &quot;aaa.txt&quot;</span><br><span class="line">echo &quot;end&quot;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//task3用于测tree、mkdir、touch</span><br><span class="line">echo &quot;This is a test for mkdir、touch and tree&quot;</span><br><span class="line">touch reg1; touch reg2; touch reg3;</span><br><span class="line">mkdir dir1; mkdir dir1/dir1-dir1; touch dir1/dir1-f1</span><br><span class="line">mkdir dir2; mkdir dir2/dir2-dir1; touch dir2/dir2-f1; touch dir2/dir2-f2;</span><br><span class="line">mkdir dir3; mkdir dir3/dir3-dir1; touch dir3/dir3-f1; touch dir3/dir3-f2; touch dir3/dir3-f2</span><br><span class="line">touch dir3/dir3-dir1/t1; touch dir3/dir3-dir1/t2;</span><br><span class="line">echo &quot;we expected 6 dirs&quot;</span><br><span class="line">tree</span><br><span class="line">tree dir1</span><br><span class="line">tree dir2</span><br><span class="line">tree dir3</span><br><span class="line">echo &quot;(*￣▽￣*)ブo&quot; &gt; edtxt</span><br><span class="line">cat edtxt</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">//task4用于主要测相对路径同时辅助测试上述内容</span><br><span class="line">echo &quot;Let&#x27;s make the filelist more complicated!&quot;</span><br><span class="line">touch reg1; touch reg2; touch reg3;</span><br><span class="line">mkdir dir1; mkdir dir1/dir1-dir1; touch dir1/dir1-f1</span><br><span class="line">mkdir dir2; mkdir dir2/dir2-dir1; touch dir2/dir2-f1; touch dir2/dir2-f2;</span><br><span class="line">mkdir dir3; mkdir dir3/dir3-dir1; touch dir3/dir3-f1; touch dir3/dir3-f2; touch dir3/dir3-f2</span><br><span class="line">touch dir3/dir3-dir1/t1; touch dir3/dir3-dir1/t2;</span><br><span class="line">tree</span><br><span class="line">cd dir1</span><br><span class="line">echo &quot;Now I&#x27;m in dir1&quot;</span><br><span class="line">pwd</span><br><span class="line">tree</span><br><span class="line">cd ..</span><br><span class="line">echo &quot;I&#x27;m back&quot;</span><br><span class="line">cd dir2</span><br><span class="line">echo &quot;Now I&#x27;m in dir2&quot;</span><br><span class="line">cd ../dir3</span><br><span class="line">echo &quot;I went straight to dir3&quot;</span><br><span class="line">touch mark1</span><br><span class="line">touch dir3-dir1/mark2</span><br><span class="line">cd dir3-dir1</span><br><span class="line">touch mark3</span><br><span class="line">cd /</span><br><span class="line">touch mark4</span><br><span class="line">tree</span><br><span class="line">echo &quot;We expected mark1 in /dir3/, mark2 &amp;&amp; mark3 in /dir3/dir3-dir1/ and mark4 in /&quot;</span><br><span class="line">echo &quot;Good luck&quot;</span><br></pre></td></tr></table></figure><p>task3结果展示：(已略去进程销毁等无关信息)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sh &lt; task3</span></span><br><span class="line"></span><br><span class="line">:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::</span><br><span class="line">::                                                         ::</span><br><span class="line">::                     MOS Shell 2023                      ::</span><br><span class="line">::                                                         ::</span><br><span class="line">:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::</span><br><span class="line">This is a test for mkdir、touch and tree</span><br><span class="line">|--aaa.txt</span><br><span class="line">|--.history</span><br><span class="line">|--reg1</span><br><span class="line">|--reg2</span><br><span class="line">|--reg3</span><br><span class="line">|--dir1</span><br><span class="line">| |--dir1-dir1</span><br><span class="line">| |--dir1-f1</span><br><span class="line">|--dir2</span><br><span class="line">| |--dir2-dir1</span><br><span class="line">| |--dir2-f1</span><br><span class="line">| |--dir2-f2</span><br><span class="line">|--dir3</span><br><span class="line">| |--dir3-dir1</span><br><span class="line">| | |--t1</span><br><span class="line">| | |--t2</span><br><span class="line">| | |--mark2</span><br><span class="line">| | |--mark3</span><br><span class="line">| |--dir3-f1</span><br><span class="line">| |--dir3-f2</span><br><span class="line">| |--mark1</span><br><span class="line">|--mark4</span><br><span class="line">|--task4</span><br><span class="line">|--testarg.b</span><br><span class="line">|--cat.b</span><br><span class="line">|--task3</span><br><span class="line">|--pingpong.b</span><br><span class="line">|--testbss.b</span><br><span class="line">|--newmotd</span><br><span class="line">|--history.b</span><br><span class="line">|--testpiperace.b</span><br><span class="line">|--testpipe.b</span><br><span class="line">|--motd</span><br><span class="line">|--init.b</span><br><span class="line">|--num.b</span><br><span class="line">|--lorem</span><br><span class="line">|--touch.b</span><br><span class="line">|--mkdir.b</span><br><span class="line">|--testfdsharing.b</span><br><span class="line">|--testshell.sh</span><br><span class="line">|--task1</span><br><span class="line">|--script</span><br><span class="line">|--ls.b</span><br><span class="line">|--pwd.b</span><br><span class="line">|--echo.b</span><br><span class="line">|--sh.b</span><br><span class="line">|--tree.b</span><br><span class="line">|--task2</span><br><span class="line">|--halt.b</span><br><span class="line">|--testptelibrary.b</span><br><span class="line"></span><br><span class="line">6 directories, 44 files</span><br><span class="line"></span><br><span class="line">|--dir1-dir1</span><br><span class="line">|--dir1-f1</span><br><span class="line"></span><br><span class="line">1 directories, 1 files</span><br><span class="line"></span><br><span class="line">|--dir2-dir1</span><br><span class="line">|--dir2-f1</span><br><span class="line">|--dir2-f2</span><br><span class="line"></span><br><span class="line">1 directories, 2 files</span><br><span class="line"></span><br><span class="line">|--dir3-dir1</span><br><span class="line">| |--t1</span><br><span class="line">| |--t2</span><br><span class="line">| |--mark2</span><br><span class="line">| |--mark3</span><br><span class="line">|--dir3-f1</span><br><span class="line">|--dir3-f2</span><br><span class="line">|--mark1</span><br><span class="line"></span><br><span class="line">1 directories, 7 files</span><br><span class="line"></span><br><span class="line">(*￣▽￣*)ブo</span><br></pre></td></tr></table></figure><p>task4结果展示：(已略去进程销毁等无关信息)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sh &lt; task4</span></span><br><span class="line"></span><br><span class="line">:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::</span><br><span class="line">::                                                         ::</span><br><span class="line">::                     MOS Shell 2023                      ::</span><br><span class="line">::                                                         ::</span><br><span class="line">:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::</span><br><span class="line">Let&#x27;s make the filelist more complicated!</span><br><span class="line"></span><br><span class="line">|--aaa.txt</span><br><span class="line">|--.history</span><br><span class="line">|--reg1</span><br><span class="line">|--reg2</span><br><span class="line">|--reg3</span><br><span class="line">|--dir1</span><br><span class="line">| |--dir1-dir1</span><br><span class="line">| |--dir1-f1</span><br><span class="line">|--dir2</span><br><span class="line">| |--dir2-dir1</span><br><span class="line">| |--dir2-f1</span><br><span class="line">| |--dir2-f2</span><br><span class="line">|--dir3</span><br><span class="line">| |--dir3-dir1</span><br><span class="line">| | |--t1</span><br><span class="line">| | |--t2</span><br><span class="line">| |--dir3-f1</span><br><span class="line">| |--dir3-f2</span><br><span class="line">|--task4</span><br><span class="line">|--testarg.b</span><br><span class="line">|--cat.b</span><br><span class="line">|--task3</span><br><span class="line">|--pingpong.b</span><br><span class="line">|--testbss.b</span><br><span class="line">|--newmotd</span><br><span class="line">|--history.b</span><br><span class="line">|--testpiperace.b</span><br><span class="line">|--testpipe.b</span><br><span class="line">|--motd</span><br><span class="line">|--init.b</span><br><span class="line">|--num.b</span><br><span class="line">|--lorem</span><br><span class="line">|--touch.b</span><br><span class="line">|--mkdir.b</span><br><span class="line">|--testfdsharing.b</span><br><span class="line">|--testshell.sh</span><br><span class="line">|--task1</span><br><span class="line">|--script</span><br><span class="line">|--ls.b</span><br><span class="line">|--pwd.b</span><br><span class="line">|--echo.b</span><br><span class="line">|--sh.b</span><br><span class="line">|--tree.b</span><br><span class="line">|--task2</span><br><span class="line">|--halt.b</span><br><span class="line">|--testptelibrary.b</span><br><span class="line"></span><br><span class="line">6 directories, 40 files</span><br><span class="line"></span><br><span class="line">Now I&#x27;m in dir1</span><br><span class="line"></span><br><span class="line">/dir1</span><br><span class="line"></span><br><span class="line">|--dir1-dir1</span><br><span class="line">|--dir1-f1</span><br><span class="line"></span><br><span class="line">1 directories, 1 files</span><br><span class="line"></span><br><span class="line">I&#x27;m back</span><br><span class="line"></span><br><span class="line">Now I&#x27;m in dir2</span><br><span class="line"></span><br><span class="line">I went straight to dir3</span><br><span class="line"></span><br><span class="line">|--aaa.txt</span><br><span class="line">|--.history</span><br><span class="line">|--reg1</span><br><span class="line">|--reg2</span><br><span class="line">|--reg3</span><br><span class="line">|--dir1</span><br><span class="line">| |--dir1-dir1</span><br><span class="line">| |--dir1-f1</span><br><span class="line">|--dir2</span><br><span class="line">| |--dir2-dir1</span><br><span class="line">| |--dir2-f1</span><br><span class="line">| |--dir2-f2</span><br><span class="line">|--dir3</span><br><span class="line">| |--dir3-dir1</span><br><span class="line">| | |--t1</span><br><span class="line">| | |--t2</span><br><span class="line">| | |--mark2</span><br><span class="line">| | |--mark3</span><br><span class="line">| |--dir3-f1</span><br><span class="line">| |--dir3-f2</span><br><span class="line">| |--mark1</span><br><span class="line">|--mark4</span><br><span class="line">|--task4</span><br><span class="line">|--testarg.b</span><br><span class="line">|--cat.b</span><br><span class="line">|--task3</span><br><span class="line">|--pingpong.b</span><br><span class="line">|--testbss.b</span><br><span class="line">|--newmotd</span><br><span class="line">|--history.b</span><br><span class="line">|--testpiperace.b</span><br><span class="line">|--testpipe.b</span><br><span class="line">|--motd</span><br><span class="line">|--init.b</span><br><span class="line">|--num.b</span><br><span class="line">|--lorem</span><br><span class="line">|--touch.b</span><br><span class="line">|--mkdir.b</span><br><span class="line">|--testfdsharing.b</span><br><span class="line">|--testshell.sh</span><br><span class="line">|--task1</span><br><span class="line">|--script</span><br><span class="line">|--ls.b</span><br><span class="line">|--pwd.b</span><br><span class="line">|--echo.b</span><br><span class="line">|--sh.b</span><br><span class="line">|--tree.b</span><br><span class="line">|--task2</span><br><span class="line">|--halt.b</span><br><span class="line">|--testptelibrary.b</span><br><span class="line"></span><br><span class="line">6 directories, 44 files</span><br><span class="line"></span><br><span class="line">We expected mark1 in /dir3/, mark2 &amp;&amp; mark3 in /dir3/dir3-dir1/ and mark4 in /</span><br><span class="line">Good luck</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">北航2023操作系统课程挑战性任务。</summary>
    
    
    
    <category term="operating system" scheme="http://srchycz.github.io/categories/operating-system/"/>
    
    
  </entry>
  
  <entry>
    <title>【设计模式】单例模式</title>
    <link href="http://srchycz.github.io/2023/05/28/singleton/"/>
    <id>http://srchycz.github.io/2023/05/28/singleton/</id>
    <published>2023-05-27T16:00:00.000Z</published>
    <updated>2023-05-27T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><em>天上只有一个月亮，世间只有一个你。</em> <em>———— 夏洛蒂·勃朗特 《简·爱》</em></p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。</p><p>设计模式已经经历了很长一段时间的发展，它们提供了软件开发过程中面临的一般问题的最佳解决方案。学习这些模式有助于经验不足的开发人员通过一种简单快捷的方式来学习软件设计。</p><p>针对实际问题合理的使用设计模式建模解决问题益处多多。当然，这篇文章并不打算宽泛的讨论各种各样的设计模式，本文仅记录一下笔者在面向对象课程学习中对单例模式(Singleton Pattern)的一些学习笔记和思考。</p><p><strong>单例模式是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，其实现简单，应用广泛。</strong></p><h1 id="什么是单例模式"><a href="#什么是单例模式" class="headerlink" title="什么是单例模式"></a>什么是单例模式</h1><p>简言之，保证整个系统中一个类<strong>仅有一个对象的实例</strong>，并提供一个它的<strong>全局访问点</strong>，实现这种功能的方式就叫单例模式。</p><p>生活中有很多单例模式的例子，比如我们生活的世界里，太阳和月亮就都只能有一个；又比如一个网站的访问量计数器，也需要保证仅有一个才能实现计数的统一和同步。</p><h1 id="为什么要用单例模式"><a href="#为什么要用单例模式" class="headerlink" title="为什么要用单例模式"></a>为什么要用单例模式</h1><h2 id="节省资源提高性能"><a href="#节省资源提高性能" class="headerlink" title="节省资源提高性能"></a>节省资源提高性能</h2><p>在内存里只有一个实例，减少了内存的开销，尤其是在一些需要频繁的创建和销毁实例情景下单例模式可以有效提高性能。</p><h2 id="便于共享与控制"><a href="#便于共享与控制" class="headerlink" title="便于共享与控制"></a>便于共享与控制</h2><p>以写文件问题为例，假如有多个程序都需要向同一个文件中写入信息，为保证正确性，就要在关键代码处上锁，按序来写。而单例模式可以抽象出唯一一个写者，避免对共享资源的多重占用。</p><p>此外，单例模式提供了全局访问点，可以优化和共享资源访问。</p><h1 id="实现单例模式"><a href="#实现单例模式" class="headerlink" title="实现单例模式"></a>实现单例模式</h1><h2 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h2><p>实现单例模式主要有以下几个关键点：</p><ul><li><strong>私有化构造函数</strong>，禁止从外部创建实例</li><li>提供一个<strong>静态方法</strong>返回唯一实例</li><li>考虑对象创建时的线程安全问题，确保在<strong>多线程环境</strong>下也只会创建出<strong>唯一实例</strong></li><li>确保<strong>反序列化</strong>时不会重新构建对象</li><li>考虑是否支持<strong>延迟加载</strong></li></ul><h2 id="实现形式-JAVA"><a href="#实现形式-JAVA" class="headerlink" title="实现形式(JAVA)"></a>实现形式(JAVA)</h2><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123; <span class="keyword">return</span> INSTANCE; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现<strong>最为简单</strong>，在类加载期间就将INSTANCE实例化，<strong>线程安全</strong>。</p><p>但相应的缺点就是<strong>不支持延迟加载</strong>，可能会造成资源浪费。</p><p>应用场景：单例类实例化的代价小时，较常用</p><h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton INSTANCE;  </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span> <span class="params">()</span>&#123;&#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (INSTANCE == <span class="literal">null</span>) &#123;  </span><br><span class="line">            INSTANCE = <span class="keyword">new</span> <span class="title class_">Singleton</span>();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> INSTANCE;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>延迟加载</strong>的单例模式，只有在第一次调用时才实例化对象。</p><p>为保证在多线程的情景下不会多次实例化，所以必须加锁(synchronized)，但加锁会带来效率上的牺牲。</p><p>应用场景:<code>getInstance()</code>调用不频繁；在<strong>单线程</strong>场景下可以不加锁以提高性能</p><h3 id="双检锁-DCL"><a href="#双检锁-DCL" class="headerlink" title="双检锁(DCL)"></a>双检锁(DCL)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton INSTANCE;  </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span> <span class="params">()</span>&#123;&#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getSingleton</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> (INSTANCE == <span class="literal">null</span>) &#123;  </span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton.class) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (INSTANCE == <span class="literal">null</span>) &#123;  </span><br><span class="line">                INSTANCE = <span class="keyword">new</span> <span class="title class_">Singleton</span>();  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> singleton;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保证了线程安全，且细化了锁粒度，只有第一次实例化INSTANCE时才会加锁。</p><p>应用场景: 多线程环境且<code>getInstance()</code>方法调用频繁</p><p><strong>注意</strong>，标识符<code>volatile</code>是必要的，意在避免在多线程并发情况因<strong>指令重排</strong>而引起的错误。</p><h4 id="指令重排"><a href="#指令重排" class="headerlink" title="指令重排"></a>指令重排</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSTANCE = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br></pre></td></tr></table></figure><p>这条指令并非原子指令，实际上它可以被分为三步：</p><p>1.分配出一块内存</p><p>2.调用构造函数，初始化成员变量</p><p>3.将<code>INSTANCE</code>指向上述空间</p><p>但是由于Java的编译器允许<strong>指令重排</strong>以提高性能，所以实际执行中可能是按1-&gt;3-&gt;2的顺序执行</p><p>在多线程并发场景下，如果线程 1 执行了 step1 和 step3 ，然后切换到线程 2 执行，线程 2 恰好又去访问这个唯一的<code>INSTANCE</code>，那么就会出现<code>INSTANCE</code>不为 NULL 但成员变量还未初始化的情况。</p><p>将 <code>INSTANCE</code>的声明中加上关键字<code>volatile</code>即可禁止编译器对它的指令重排</p><h3 id="登记式"><a href="#登记式" class="headerlink" title="登记式"></a>登记式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHolder</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span> <span class="params">()</span>&#123;&#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>线程安全且延迟加载。</strong></p><p>其与最初的饿汉式相比，区别主要在于，饿汉式在单例类被装载时<code>INSTANCE</code>就会实例化,而登记式只有在显式调用<code>getInstance()</code>方法时，才去装载<code>SingletonHolder</code>类，从而才去实例化<code>INSTANCE</code>。</p><p>当然，这种形式也有其<strong>局限性</strong>，就是传参问题，采用静态内部类形式创建单例是无法接受外部的初始化参数的。所以具体应用中可根据需要在DCL和静态内部类形式中斟酌。</p><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    INSTANCE;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">whateverMethod</span><span class="params">()</span> &#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>JDK1.5以上可用</strong></p><p><strong>简洁，线程安全，自动支持序列化，防止反射攻击</strong></p><p>应用场景：涉及到反序列化创建对象时；同样支持其他场景</p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><p><a href="https://github.com/Srchycz/BUAA-OO-2023/blob/HW-13/HW13-Problem.pdf">BUAA-OO-2023-HW13-Problem.pdf at HW-13 · Srchycz&#x2F;BUAA-OO-2023 (github.com)</a></p><p>上述链接是BUAA-2023面向对象课程的第13次作业，这次作业是单例模式的一个很好应用，同仓库下有针对该作业应用了单例模式设计的Java源码和类图，这里不再赘述。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文主要就单例模式(Singleton)是什么、为什么要用单例模式以及怎样实现单例模式进行了总结。正如前言中所提到的，根据场景合理的选择设计模式，合理的实现设计模式其益处多多，而这也是一种能力的体现。学海无涯，唯勤可渡，笔者个人能力有限，上述内容如有错误之处，还望不吝指出。</p>]]></content>
    
    
    <summary type="html">天上有多少星光，世间有多少女孩。但天上只有一个月亮，世间只有一个你。&lt;br&gt; 北航2023面向对象与程序设计课程学习笔记。</summary>
    
    
    
    <category term="Object-Oriented" scheme="http://srchycz.github.io/categories/Object-Oriented/"/>
    
    
    <category term="Design-Pattern" scheme="http://srchycz.github.io/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>Dijkstra求无向图过某点最小环</title>
    <link href="http://srchycz.github.io/2023/05/12/%E6%9C%80%E5%B0%8F%E7%8E%AF/"/>
    <id>http://srchycz.github.io/2023/05/12/%E6%9C%80%E5%B0%8F%E7%8E%AF/</id>
    <published>2023-05-11T16:00:00.000Z</published>
    <updated>2023-05-11T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>该部分针对第十一次作业新增方法<code>queryLeastMoment</code>进行一个效率较高的思路分享</p><p>在理解完JML后，该方法可以概括为，给定一个无向图，求出无向图上过某点的最小环</p><h2 id="魔改-dijkstra"><a href="#魔改-dijkstra" class="headerlink" title="魔改 dijkstra"></a>魔改 dijkstra</h2><h3 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h3><p>不妨设无向图为G(V,E)，源点是x，要求出过x点的最小环</p><p>一种可行的思路是，逐个枚举V中的点y(y!&#x3D;x),求出经过x，y的最小环，这个环是满足原本要求的(即经过点x的)，显然，在逐个枚举点y后，其中的最小值即是答案</p><p>那么问题转化为如何快速的求出经过点x,y的最小环，我们考虑求出x-&gt;y的最短路及带一定<strong>限制</strong>的次短路。我们作个约定，称一条以x为起点的路径中从x出发经过的第一个点称作<strong>出点</strong>，那么我们所要求的限制就是<strong>次短路的出点与最短路的出点不同</strong>。</p><p>最短路和带限制的次短路拼起来显然就构成了一个经过x的“环”。我们对所有点都求出类似的最短路和次短路即可更新答案。</p><p>当然，如果仔细想一下，可以发现上文所提到由最短路和带限制的次短路构成的环中，我们只在出点部分作了约束，最短路和次短路在后续部分可能存在重叠，并非严格意义上的环。但是由于我们对出点的限制，在这样最短路和次短路拼接后的路径中，一定包含了一个过x的环，这个将在枚举到两段路径第一次重叠时的顶点被考虑到，从而不会影响正确性。</p><p><img src="https://s2.loli.net/2023/05/12/5VQHD2iEK31jF8T.png" alt="graph.png"></p><p>如上图中1-&gt;3的最短路是：1-&gt;5-&gt;3，带限制的次短路为1-&gt;6-&gt;2-&gt;5-&gt;3,拼接后会有重合（5-&gt;3部分），但是在枚举到5号点时该答案一定会被优化掉，所以不影响正确性。</p><p>幸运的是，要求出从x出发的单源最短路和单源限制次短路是可以在1次<code>dijkstra</code>内完成的！</p><h3 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h3><h4 id="dijkstra流程回顾："><a href="#dijkstra流程回顾：" class="headerlink" title="dijkstra流程回顾："></a><code>dijkstra</code>流程回顾：</h4><p>1.初始化</p><p>源点dist[x] &#x3D; 0,与源点直接相连的顶点初始化dist[v]&#x3D;w(x,v)，其他顶点的dist设为极大值</p><p>同时记录一个vis数组，初始化除源点外均为false</p><p>2.找出一个未被标记的、dist最小的顶点u,然后将其对应的vis置为true</p><p>3.扫描u的所有出边，判断是否满足三角形不等式，尝试用dist[u] + w(u,v)更新dist[v]</p><p>4.重复2、3,直到所有节点均被标记</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>在初始化部分中，对于每个点，我们需要记录四个字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Path</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> dist1;<span class="comment">//最短路长</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> dist2;<span class="comment">//次短路长</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> origin1;<span class="comment">//最短路出点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> origin2;<span class="comment">//次短路出点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化时，<code>dist</code>置极大值(如0x3f3f3f3f)，<code>origin</code>可置-1</p><p>然后将与起点直接相连的顶点的dist1置为相连边的权重，origin1记为该顶点本身的id</p><h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><p>我们还是每次挑出最短路最小的且未访问过的顶点，记其为u，然后扫描u的所有出边，记出边的另一个顶点为v</p><p>在更新部分，简言之，要用当前点<code>u</code>的最短路和次短路分别去尝试更新目标点<code>v</code>的最短路和次短路</p><p>记<code>dis(u)</code>为到u的最短路，<code>dis2(u)</code>为次短路，<code>ori(u)</code>为最短路的出点，<code>ori2(u)</code>为次短路出点，那么更新的逻辑展示如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> dist)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (dist + w(u,v) &lt; dis(v)) &#123;<span class="comment">//当前v的最短路可被更新</span></span><br><span class="line">    <span class="keyword">if</span> (ori(u) != ori(v)) &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        新路径与原最短路出点不同 那么v原先的最短路就可作为次短路</span></span><br><span class="line"><span class="comment">        把v的最短路赋值给v的次短路 记得也要把出点赋值过去</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    不论新路径的出点是否与原最短路相同</span></span><br><span class="line"><span class="comment">    在满足三角形不等式的条件下 都一定用新路径更新最短路</span></span><br><span class="line"><span class="comment">        最短路的出点改为新路径的出点</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (dist + w(u,v) &lt; dis2(v)) &#123;<span class="comment">//当前v的次短路可被更新</span></span><br><span class="line"><span class="keyword">if</span> (ori(u) != ori(v)) &#123;</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">       新路径与最短路的出点不同</span></span><br><span class="line"><span class="comment">       可以用来更新次短路</span></span><br><span class="line"><span class="comment">            同时次短路的出点改为新路径的出点</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">update(dis(u));<span class="comment">//尝试用u的最短路去更新</span></span><br><span class="line">update(dis2(u));<span class="comment">//尝试用u的次短路去更新</span></span><br></pre></td></tr></table></figure><p>其余部分与<code>dijkstra</code>流程相同，不再赘述</p><h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><p>通过上述实现，我们可以做一遍<code>dijkstra</code>就求出以x为源点的单源最短路和单源带限制次短路</p><p>然后逐个枚举每个点，用最短路+次短路更新答案即可</p><p>一次询问中，上述复杂度为$O(n+n^2)$的, 当然，<code>dijkstra</code>的过程可以用优先队列去优化</p><p>优化后单次询问复杂度为$O(n+mlog\space n)$</p><h3 id="个人反思"><a href="#个人反思" class="headerlink" title="个人反思"></a>个人反思</h3><p>在上述算法中跑完一遍<code>dijkstra</code>后, 我们枚举每个点尝试用其最短路+次短路更新答案，但是这里似乎还有优化空间，枚举范围其实可以缩小为与源点x直接相连的顶点集。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上是我就本次作业中<code>queryLeastMoment</code>方法一个实现思路分享，个人水平有限，上述内容如有错误，还望不吝指出</p>]]></content>
    
    
    <summary type="html">由BUAA-OO-2023作业引发的思考</summary>
    
    
    
    <category term="Algorithm" scheme="http://srchycz.github.io/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://srchycz.github.io/2023/04/25/hello-world/"/>
    <id>http://srchycz.github.io/2023/04/25/hello-world/</id>
    <published>2023-04-25T10:45:18.867Z</published>
    <updated>2023-04-25T10:45:18.867Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
